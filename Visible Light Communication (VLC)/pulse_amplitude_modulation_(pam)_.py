# -*- coding: utf-8 -*-
"""Pulse Amplitude Modulation (PAM)..ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HmIJIzoKfUiQyNdMHuL71Pi_cPstWxnM
"""

import numpy as np
import matplotlib.pyplot as plt

# Binary Data
data = np.array([0, 1, 0, 1, 1, 0, 1])

# Parameters
num_bits = len(data)  # Number of bits
Ts = 1  # Symbol period
Fs = 100  # Sampling frequency 
t = np.linspace(0, Ts, Fs, endpoint=False)  # Time

# PAM Modulation
pam = np.zeros((num_bits, Fs))  # Initialize PAM signal
for i in range(num_bits):
    if data[i] == 1:
        pam[i, :] = 1  # If bit is 1, whole symbol period is 1
    else:
        pam[i, :] = -1  # If bit is 0, whole symbol period is -1

# Plot
plt.figure(figsize=(10,5))
plt.plot(pam.flatten(), 'b')
plt.yticks([-1, 1], ['0', '1'])
plt.grid(True)
plt.show()

# PAM Demodulation
demodulated_data = np.zeros(num_bits)
for i in range(num_bits):
    if np.mean(pam[i, :]) > 0:
        demodulated_data[i] = 1
    else:
        demodulated_data[i] = 0

# Results
print('Original Data: ', data)
print('Demodulated Data: ', demodulated_data)